{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["chart","am4core","am4plugins_sunburst","data","name","children","value","dataFields","App","className","src","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAMIA,G,MAAQC,IAAe,WAAYC,MAEvCF,EAAMG,KAAO,CAAC,CACZC,KAAM,QACNC,SAAU,CACR,CAAED,KAAM,KAAME,MAAO,KACrB,CAAEF,KAAM,KAAME,MAAO,MAGzB,CACEF,KAAM,SACNC,SAAU,CACR,CAAED,KAAM,KAAME,MAAO,KACrB,CAAEF,KAAM,KAAME,MAAO,MAGzB,CACEF,KAAM,QACNC,SAAU,CACR,CACED,KAAM,KACNC,SAAU,CACR,CAAED,KAAM,MAAOE,MAAO,KACtB,CAAEF,KAAM,MAAOE,MAAO,IACtB,CAAEF,KAAM,MAAOE,MAAO,MAG1B,CAAEF,KAAM,KAAME,MAAO,KACrB,CACEF,KAAM,KAAMC,SAAU,CACpB,CAAED,KAAM,MAAOE,MAAO,IACtB,CAAEF,KAAM,MAAOE,MAAO,MAG1B,CAAEF,KAAM,KAAME,MAAO,MAGzB,CACEF,KAAM,SACNC,SAAU,CACR,CAAED,KAAM,KAAME,MAAO,KACrB,CAAEF,KAAM,KAAME,MAAO,KACrB,CAAEF,KAAM,KAAME,MAAO,MAGzB,CACEF,KAAM,QACNC,SAAU,CACR,CACED,KAAM,KACNC,SAAU,CACR,CAAED,KAAM,MAAOE,MAAO,IACtB,CAAEF,KAAM,MAAOE,MAAO,IACtB,CAAEF,KAAM,MAAOE,MAAO,MAG1B,CACEF,KAAM,KACNE,MAAO,QAKbN,EAAMO,WAAWD,MAAQ,QACzBN,EAAMO,WAAWH,KAAO,OACxBJ,EAAMO,WAAWF,SAAW,WAcbG,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQC,IAAI,qCACZ,4BAAQA,IAAI,uCACZ,4BAAQA,IAAI,iDACZ,4BAAQA,IAAI,gDACZ,yBAAKC,GAAG,eCpEMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.56b26219.chunk.js","sourcesContent":["import React from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4plugins_sunburst from \"@amcharts/amcharts4/plugins/sunburst\"; \n\nimport './App.css';\n\nlet chart = am4core.create(\"chartdiv\", am4plugins_sunburst.Sunburst); \n\nchart.data = [{\n  name: \"First\",\n  children: [\n    { name: \"A1\", value: 100 },\n    { name: \"A2\", value: 60 }\n  ]\n},\n{\n  name: \"Second\",\n  children: [\n    { name: \"B1\", value: 135 },\n    { name: \"B2\", value: 98 }\n  ]\n},\n{\n  name: \"Third\",\n  children: [\n    {\n      name: \"C1\",\n      children: [\n        { name: \"EE1\", value: 130 },\n        { name: \"EE2\", value: 87 },\n        { name: \"EE3\", value: 55 }\n      ]\n    },\n    { name: \"C2\", value: 148 },\n    {\n      name: \"C3\", children: [\n        { name: \"CC1\", value: 53 },\n        { name: \"CC2\", value: 30 }\n      ]\n    },\n    { name: \"C4\", value: 26 }\n  ]\n},\n{\n  name: \"Fourth\",\n  children: [\n    { name: \"D1\", value: 415 },\n    { name: \"D2\", value: 148 },\n    { name: \"D3\", value: 89 }\n  ]\n},\n{\n  name: \"Fifth\",\n  children: [\n    {\n      name: \"E1\",\n      children: [\n        { name: \"EE1\", value: 33 },\n        { name: \"EE2\", value: 40 },\n        { name: \"EE3\", value: 89 }\n      ]\n    },\n    {\n      name: \"E2\",\n      value: 148\n    }\n  ]\n}];\n\nchart.dataFields.value = \"value\";\nchart.dataFields.name = \"name\";\nchart.dataFields.children = \"children\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <script src=\"//cdn.amcharts.com/lib/4/core.js\"></script>\n      <script src=\"//cdn.amcharts.com/lib/4/charts.js\"></script>\n      <script src=\"//cdn.amcharts.com/lib/4/plugins/sunburst.js\"></script>\n      <script src=\"//cdn.amcharts.com/lib/4/themes/animated.js\"></script>\n      <div id=\"chartdiv\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}